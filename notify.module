<?php
// $Id$

function notify_system($field) {
  $system["description"] = t("Enables notifications by email");
  return $system[$field];
}

function notify_content($node, $notify) {
  switch ($notify->teasers) {
    case 0:
      break;
    case 1:
      $output = $node->teaser ? strip_tags("$node->teaser\n") : "";
      break;
    case 2:
      $output = $node->body ? strip_tags("$node->body\n") : "";
  }
  return $output;    
}  

function notify_send() {
  $period = variable_get("notify_send_last", time() - variable_get("notify_send", 86400));

  // Fetch all new nodes
  $nresult = db_query("SELECT n.body, n.nid, n.type, n.title, n.promote, n.moderate, n.teaser, n.created, n.changed, u.name FROM node n LEFT JOIN users u ON n.uid = u.uid WHERE n.status = 1 AND n.created > $period ORDER BY n.created");
  while ($node = db_fetch_object($nresult)) {
    $nodes[$node->nid] = $node;
  }

  // Fetch new comments
  $cresult = db_query("SELECT c.cid, c.nid, c.subject, c.pid, u.name FROM comments c LEFT JOIN users u ON u.uid = c.uid WHERE c.timestamp > $period ORDER BY c.nid, c.timestamp");
  while ($comment = db_fetch_object($cresult)) {
    $comments[$comment->nid][] = $comment;
  }

  // Fetch users with notify enabled
  $uresult = db_query("SELECT uid, status, node, teasers, comment FROM notify WHERE status = 1". (variable_get(notify_attempts, 5) ? " AND attempts <= ". variable_get(notify_attempts, 5) : ""));
  global $user;
  $from = variable_get("site_mail", ini_get("sendmail_from"));
  while ($notify = db_fetch_object($uresult)) {
    $user = user_load(array("uid" => $notify->uid));
    $subject = variable_get("site_name", "drupal") ." ". t("notification for %name", array ("%name" =>$user->name));
    if (user_access("access notify")) {
      $body = "";
      // New content
      if ($notify->node && count($nodes) && user_access("access content")) {
        $body .= t("Recent content") ."\n". str_repeat("-", strlen(t("Recent content"))) ."\n\n";
        foreach ($nodes as $node) {
          if ($notify->moderate && user_access("access submission queue")) {
            $body .= strtr(t("%status %type by %author: %title"), array("%status" => "queued", "%type" => check_output($node->type), "%title" => check_output($node->title), "%author" => ($node->name ? $node->name : variable_get(anonymous, "Anonymous")))) ."\n";
            $body .= notify_content($node, $notify);
            $body .= "  [ ". path_uri() . url("queue/view/$node->nid") ." ]\n\n";
          }
          elseif (!$notify->moderate && $node->nid) {
            $body .= strtr(t("%status %type by %author: %title"), array("%status" => "published", "%type" => check_output($node->type), "%title" => check_output($node->title), "%author" => ($node->name ? $node->name : variable_get(anonymous, "Anonymous")))) ."\n";
            $body .= notify_content($node, $notify);
            $body .= "  [ ". path_uri() . url("node/view/$node->nid") ." ]\n\n";
          }
        }
      }

      // New comments
      if ($notify->comment && count($comments) && user_access("access comments")) {
        $body .= t("Recent comments") ."\n". str_repeat("-", strlen(t("Recent comments"))) ."\n\n";
        foreach ($comments as $nid => $comment) {
          if ($nid != $nid_old) {
            if (strlen($nodes[$nid]->title) < 2) {
              $result = db_query("SELECT title FROM node WHERE nid = '$nid'");
              $nodes[$nid] = db_fetch_object($result);
            }
            $body .= strtr(t("%count new comments attached to %title"), array("%count" => count($comment), "%title" => $nodes[$nid]->title)) ."\n";
            $nid_old = $nid;
          }
          foreach ($comment as $c) {
            $body .= "  ". strtr(t("%title by %author"), array("%title" => check_output($c->subject), "%author" => ($c->name ? $c->name : variable_get(anonymous, "Anonymous")))) ."\n"
                  .  "    ". path_uri() . url("node/view/$nid/$c->cid#$c->cid") ."\n\n";
          }
        }
      }

      if ($body) {
        $to = $user->mail;

        $body = t("Greetings") ." ". $user->name .",\n\n$body";

        $body .= "\n-- \n";
        $body .= t("This is an automatic mail from") ." ". variable_get("site_name", "drupal") ."\n";
        $body .= t("To stop receiving these mails go to") ." ". path_uri() ."\n";

        if (!user_mail($to, $subject, wordwrap($body, 72), "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: <$from>\nErrors-to: $from\n")) {
          db_query("UPDATE notify SET attempts = attempts + 1 WHERE uid = $user->uid");
        }
      }
    }
  }
}

function notify_conf_options() {
  $period = array(900 => format_interval(900), 1800 => format_interval(1800), 3600 => format_interval(3600), 10800 => format_interval(10800), 21600 => format_interval(21600), 32400 => format_interval(32400), 43200 => format_interval(43200), 86400 => format_interval(86400), 172800 => format_interval(172800), 259200 => format_interval(259200), 604800 => format_interval(604800), 1209600 => format_interval(1209600), 2419200 => format_interval(2419200), 1000000000 => "Never");
  $output .= form_select("Send notifications every", "notify_send", variable_get("notify_send", 86400), $period, "Requires crontab.");
  $output .= form_select("Number of failed sends after which notifications are disabled", "notify_attempts", variable_get("notify_attempts", 5), array("Disabled", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20));

  return $output;
}

function notify_cron() {
  if (time() - variable_get("notify_send_last", 0) > variable_get("notify_send", 86400)) {
    notify_send();
    variable_set("notify_send_last", time());
  }
}

function notify_perm() {
  return array("access notify", "administer notify");
}

function notify_link($type) {
  if ($type == "menu.settings" && user_access("access notify")) {
    $links[] = l(t("notification settings"), "notify");
  }

  if ($type == "admin" && user_access("administer notify")) {
    menu_add("notifications", url("admin/notify"), "Configure user notifications.", NULL, "user management", 6);
  }

  return $links ? $links : array();
}

function notify_page() {
  global $theme, $op, $user, $edit;

  if (user_access("access notify") && $user) {
    switch ($op) {
      case "cron":
        notify_send();
        break;
      case t("Save settings"):
        db_query(sprintf("REPLACE notify (uid, status, node, teasers, comment) VALUES (%s, %s, %s, %s, %s)", $user->uid, check_input($edit["status"]), check_input($edit["node"]), check_input($edit["teasers"]), check_input($edit["comment"])));
        $form .= status("Settings saved");
      default:
        $result = db_query("SELECT u.name, u.mail, n.status, n.node, n.teasers, n.comment FROM users u LEFT JOIN notify n ON u.uid = n.uid WHERE u.uid = $user->uid AND u.status = 1 ORDER BY u.name");
        $notify = db_fetch_object($result);

        $form .= form_select(t("Notify status"), "status", $notify->status, array("Disabled", "Enabled"), t("Do you wish to receive periodic emails when new content is posted?"));
        $form .= form_select(t("Notify new content"), "node", $notify->node, array("Disabled", "Enabled"), t("Include new content in the notification mail."));
        $form .= form_select(t("Content"), "teasers", $notify->teasers, array("Title only", "Title + Teaser", "Title + Body"), t("Select the amount of each post that you would like to see in your notification emails."));
        $form .= form_select(t("Notify new comments"), "comment", $notify->comment, array("Disabled", "Enabled"), t("Include new comments in the notification mail."));
        $form .= form_submit(t("Save settings"));

        $theme->header();
        $theme->box(t("Notify"), form($form));

        $theme->footer();
    }
  }
  else {
    print message_access();
  }
}

function notify_admin() {
  global $op;

  switch ($op) {
    case "Save":
      global $edit;
      db_query("UPDATE notify SET node = '0', teasers = '0', comment = '0'");
      if (is_array($edit)) {
        foreach ($edit as $uid=>$settings) {
          db_query("UPDATE notify SET status = '1', node = '". ($settings["node"] ? 1 : 0) ."', teasers = '". ($settings["teasers"] ? 1 : 0) ."', comment = '". ($settings["comment"] ? 1 : 0) ."' WHERE uid = '". check_input($uid) ."'");
        }
      }
    default:
      $result = db_query("SELECT u.uid, u.name, u.mail, n.node, n.comment, n.teasers, n.attempts FROM users u LEFT JOIN notify n ON u.uid = n.uid WHERE n.status = 1 && u.status = 1 ORDER BY u.name");
      $header = array (t("username"), t("email address"), t("content"), t("comment"), t("failed attempts"));
      $i = 0;
      while ($notify = db_fetch_object($result)) {
        $rows[$i][] = format_name($notify);
        $rows[$i][] = $notify->mail;
        $rows[$i][] = "<input type=\"checkbox\" name=\"edit[$notify->uid][node]\"". ($notify->node ? " checked=\"checked\"" : "") .">";
        $rows[$i][] = "<input type=\"checkbox\" name=\"edit[$notify->uid][comment]\"". ($notify->comment ? " checked=\"checked\"" : "") .">";
        $rows[$i][] = $notify->attempts;
        $i++;
      }
      $rows[$i][] = form_submit("Save");
      $output = table($header, $rows);
      print form($output);
  }
}

?>
